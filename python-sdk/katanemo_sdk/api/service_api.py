# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictStr, conlist

from typing import List, Optional, Union

from katanemo_sdk.models.get_developer_public_keys200_response import GetDeveloperPublicKeys200Response
from katanemo_sdk.models.get_tags_request import GetTagsRequest
from katanemo_sdk.models.service_response_obj import ServiceResponseObj
from katanemo_sdk.models.tags import Tags

from katanemo_sdk.api_client import ApiClient
from katanemo_sdk.api_response import ApiResponse
from katanemo_sdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_service(self, name : Annotated[StrictStr, Field(..., description="Service Name")], redirect_url : Annotated[StrictStr, Field(..., description="Redirect URL after a successful login.")], api_spec_file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="openapi service json or yaml file")], description : Annotated[Optional[StrictStr], Field(description="Service Description")] = None, auth_exclusion_paths : Annotated[Optional[conlist(StrictStr)], Field(description="List of paths for which we do not require authentication")] = None, display_name : Annotated[Optional[StrictStr], Field(description="Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages")] = None, logo_url : Annotated[Optional[StrictStr], Field(description="The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages")] = None, details_image_url : Annotated[Optional[StrictStr], Field(description="The URL of image showing details about the service to be displayed on the sign-up page.")] = None, terms_url : Annotated[Optional[StrictStr], Field(description="The URL for the terms of the service")] = None, privacy_url : Annotated[Optional[StrictStr], Field(description="The URL for the privacy of the service")] = None, docs_url : Annotated[Optional[StrictStr], Field(description="The URL for the documentation of the service")] = None, **kwargs) -> ServiceResponseObj:  # noqa: E501
        """Create Service  # noqa: E501

        Create a Service in Katanemo. Once a service is created Katanemo  identity and authorization capabilities on behalf of SaaS (API) Developers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_service(name, redirect_url, api_spec_file, description, auth_exclusion_paths, display_name, logo_url, details_image_url, terms_url, privacy_url, docs_url, async_req=True)
        >>> result = thread.get()

        :param name: Service Name (required)
        :type name: str
        :param redirect_url: Redirect URL after a successful login. (required)
        :type redirect_url: str
        :param api_spec_file: openapi service json or yaml file (required)
        :type api_spec_file: bytearray
        :param description: Service Description
        :type description: str
        :param auth_exclusion_paths: List of paths for which we do not require authentication
        :type auth_exclusion_paths: List[str]
        :param display_name: Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages
        :type display_name: str
        :param logo_url: The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages
        :type logo_url: str
        :param details_image_url: The URL of image showing details about the service to be displayed on the sign-up page.
        :type details_image_url: str
        :param terms_url: The URL for the terms of the service
        :type terms_url: str
        :param privacy_url: The URL for the privacy of the service
        :type privacy_url: str
        :param docs_url: The URL for the documentation of the service
        :type docs_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServiceResponseObj
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_service_with_http_info(name, redirect_url, api_spec_file, description, auth_exclusion_paths, display_name, logo_url, details_image_url, terms_url, privacy_url, docs_url, **kwargs)  # noqa: E501

    @validate_arguments
    def create_service_with_http_info(self, name : Annotated[StrictStr, Field(..., description="Service Name")], redirect_url : Annotated[StrictStr, Field(..., description="Redirect URL after a successful login.")], api_spec_file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="openapi service json or yaml file")], description : Annotated[Optional[StrictStr], Field(description="Service Description")] = None, auth_exclusion_paths : Annotated[Optional[conlist(StrictStr)], Field(description="List of paths for which we do not require authentication")] = None, display_name : Annotated[Optional[StrictStr], Field(description="Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages")] = None, logo_url : Annotated[Optional[StrictStr], Field(description="The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages")] = None, details_image_url : Annotated[Optional[StrictStr], Field(description="The URL of image showing details about the service to be displayed on the sign-up page.")] = None, terms_url : Annotated[Optional[StrictStr], Field(description="The URL for the terms of the service")] = None, privacy_url : Annotated[Optional[StrictStr], Field(description="The URL for the privacy of the service")] = None, docs_url : Annotated[Optional[StrictStr], Field(description="The URL for the documentation of the service")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Service  # noqa: E501

        Create a Service in Katanemo. Once a service is created Katanemo  identity and authorization capabilities on behalf of SaaS (API) Developers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_service_with_http_info(name, redirect_url, api_spec_file, description, auth_exclusion_paths, display_name, logo_url, details_image_url, terms_url, privacy_url, docs_url, async_req=True)
        >>> result = thread.get()

        :param name: Service Name (required)
        :type name: str
        :param redirect_url: Redirect URL after a successful login. (required)
        :type redirect_url: str
        :param api_spec_file: openapi service json or yaml file (required)
        :type api_spec_file: bytearray
        :param description: Service Description
        :type description: str
        :param auth_exclusion_paths: List of paths for which we do not require authentication
        :type auth_exclusion_paths: List[str]
        :param display_name: Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages
        :type display_name: str
        :param logo_url: The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages
        :type logo_url: str
        :param details_image_url: The URL of image showing details about the service to be displayed on the sign-up page.
        :type details_image_url: str
        :param terms_url: The URL for the terms of the service
        :type terms_url: str
        :param privacy_url: The URL for the privacy of the service
        :type privacy_url: str
        :param docs_url: The URL for the documentation of the service
        :type docs_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServiceResponseObj, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'redirect_url',
            'api_spec_file',
            'description',
            'auth_exclusion_paths',
            'display_name',
            'logo_url',
            'details_image_url',
            'terms_url',
            'privacy_url',
            'docs_url'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['name']:
            _form_params.append(('name', _params['name']))

        if _params['description']:
            _form_params.append(('description', _params['description']))

        if _params['redirect_url']:
            _form_params.append(('redirectUrl', _params['redirect_url']))

        if _params['api_spec_file']:
            _files['apiSpecFile'] = _params['api_spec_file']

        if _params['auth_exclusion_paths']:
            _form_params.append(('authExclusionPaths', _params['auth_exclusion_paths']))
            _collection_formats['authExclusionPaths'] = 'csv'

        if _params['display_name']:
            _form_params.append(('displayName', _params['display_name']))

        if _params['logo_url']:
            _form_params.append(('logoUrl', _params['logo_url']))

        if _params['details_image_url']:
            _form_params.append(('detailsImageUrl', _params['details_image_url']))

        if _params['terms_url']:
            _form_params.append(('termsUrl', _params['terms_url']))

        if _params['privacy_url']:
            _form_params.append(('privacyUrl', _params['privacy_url']))

        if _params['docs_url']:
            _form_params.append(('docsUrl', _params['docs_url']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ServiceResponseObj",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_tags(self, service_id : StrictStr, tags : Annotated[Tags, Field(..., description="Tags and resource id")], **kwargs) -> Tags:  # noqa: E501
        """Add tags to a resource  # noqa: E501

        Add tags (key/value pair) to a particular resource that is created for a service, for a particular organization account id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tags(service_id, tags, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param tags: Tags and resource id (required)
        :type tags: Tags
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tags
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_tags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_tags_with_http_info(service_id, tags, **kwargs)  # noqa: E501

    @validate_arguments
    def create_tags_with_http_info(self, service_id : StrictStr, tags : Annotated[Tags, Field(..., description="Tags and resource id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Add tags to a resource  # noqa: E501

        Add tags (key/value pair) to a particular resource that is created for a service, for a particular organization account id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tags_with_http_info(service_id, tags, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param tags: Tags and resource id (required)
        :type tags: Tags
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tags, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'service_id',
            'tags'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tags" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['service_id']:
            _path_params['serviceId'] = _params['service_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['tags'] is not None:
            _body_params = _params['tags']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Tags",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service/{serviceId}/tags', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_service(self, service_id : StrictStr, **kwargs) -> None:  # noqa: E501
        """Delete Service  # noqa: E501

        Deletes a service. Note the delete operation is a 'soft' delete where by organizations can't access your service. Requires a bearer token to validate that the caller can delete the service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_service(service_id, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_service_with_http_info(service_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_service_with_http_info(self, service_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Service  # noqa: E501

        Deletes a service. Note the delete operation is a 'soft' delete where by organizations can't access your service. Requires a bearer token to validate that the caller can delete the service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_service_with_http_info(service_id, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'service_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['service_id']:
            _path_params['serviceId'] = _params['service_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/service/{serviceId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_default_service(self, **kwargs) -> ServiceResponseObj:  # noqa: E501
        """Get Details for Katanemo AAA  # noqa: E501

        Gets details about Katanemo's AAA SaaS service. Katanemo is powered by Katanemo, and our 3xA service uses the same core identity and authorization capabilities that we offer SaaS (API) developers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_default_service(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServiceResponseObj
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_default_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_default_service_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_default_service_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Details for Katanemo AAA  # noqa: E501

        Gets details about Katanemo's AAA SaaS service. Katanemo is powered by Katanemo, and our 3xA service uses the same core identity and authorization capabilities that we offer SaaS (API) developers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_default_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServiceResponseObj, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_default_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=UTF-8', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ServiceResponseObj",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service/3xA', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_developer_public_keys(self, service_id : StrictStr, **kwargs) -> GetDeveloperPublicKeys200Response:  # noqa: E501
        """JWKS endpoint for Service  # noqa: E501

        Gets public key that can be used to verify jwt token issued by Katanemo. This API does not require bearer authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_developer_public_keys(service_id, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDeveloperPublicKeys200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_developer_public_keys_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_developer_public_keys_with_http_info(service_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_developer_public_keys_with_http_info(self, service_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """JWKS endpoint for Service  # noqa: E501

        Gets public key that can be used to verify jwt token issued by Katanemo. This API does not require bearer authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_developer_public_keys_with_http_info(service_id, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDeveloperPublicKeys200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'service_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_developer_public_keys" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['service_id']:
            _path_params['serviceId'] = _params['service_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GetDeveloperPublicKeys200Response",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service/{serviceId}/.well-known/jwks.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_service(self, service_id : StrictStr, **kwargs) -> ServiceResponseObj:  # noqa: E501
        """Get Service  # noqa: E501

        Gets a Katanemo Service. The principal token must be present in the bearer header to retrieve the service details, unless the service is public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service(service_id, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServiceResponseObj
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_service_with_http_info(service_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_service_with_http_info(self, service_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Service  # noqa: E501

        Gets a Katanemo Service. The principal token must be present in the bearer header to retrieve the service details, unless the service is public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_with_http_info(service_id, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServiceResponseObj, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'service_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['service_id']:
            _path_params['serviceId'] = _params['service_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ServiceResponseObj",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service/{serviceId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_tags_for_resource(self, service_id : StrictStr, get_tags_request : Annotated[GetTagsRequest, Field(..., description="Tags and resource id")], **kwargs) -> Tags:  # noqa: E501
        """Gets tags for a resource  # noqa: E501

        Gets tags associated with a resource of a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tags_for_resource(service_id, get_tags_request, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param get_tags_request: Tags and resource id (required)
        :type get_tags_request: GetTagsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tags
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_tags_for_resource_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_tags_for_resource_with_http_info(service_id, get_tags_request, **kwargs)  # noqa: E501

    @validate_arguments
    def get_tags_for_resource_with_http_info(self, service_id : StrictStr, get_tags_request : Annotated[GetTagsRequest, Field(..., description="Tags and resource id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Gets tags for a resource  # noqa: E501

        Gets tags associated with a resource of a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tags_for_resource_with_http_info(service_id, get_tags_request, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param get_tags_request: Tags and resource id (required)
        :type get_tags_request: GetTagsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tags, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'service_id',
            'get_tags_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tags_for_resource" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['service_id']:
            _path_params['serviceId'] = _params['service_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['get_tags_request'] is not None:
            _body_params = _params['get_tags_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Tags",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service/{serviceId}/tags', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_services_by_developer(self, **kwargs) -> List[ServiceResponseObj]:  # noqa: E501
        """List Services  # noqa: E501

        List services that belong to a particular developer. Requires bearer token authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_services_by_developer(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ServiceResponseObj]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_services_by_developer_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_services_by_developer_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def list_services_by_developer_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """List Services  # noqa: E501

        List services that belong to a particular developer. Requires bearer token authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_services_by_developer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ServiceResponseObj], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_services_by_developer" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[ServiceResponseObj]",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_service(self, service_id : StrictStr, name : Annotated[Optional[StrictStr], Field(description="Service Name")] = None, description : Annotated[Optional[StrictStr], Field(description="Service Description")] = None, redirect_url : Annotated[Optional[StrictStr], Field(description="Redirect URL after a successful login.")] = None, api_spec_file : Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="openapi service json or yaml file")] = None, auth_exclusion_paths : Annotated[Optional[conlist(StrictStr)], Field(description="List of paths for which we do not require authentication")] = None, display_name : Annotated[Optional[StrictStr], Field(description="Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages")] = None, logo_url : Annotated[Optional[StrictStr], Field(description="The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages")] = None, details_image_url : Annotated[Optional[StrictStr], Field(description="The URL of image showing details about the service to be displayed on the sign-up page.")] = None, terms_url : Annotated[Optional[StrictStr], Field(description="The URL for the terms of the service")] = None, privacy_url : Annotated[Optional[StrictStr], Field(description="The URL for the privacy of the service")] = None, docs_url : Annotated[Optional[StrictStr], Field(description="The URL for the documentatio of the service")] = None, **kwargs) -> ServiceResponseObj:  # noqa: E501
        """Update Service  # noqa: E501

        Update Service. Requires bearer token authorization for the caller updating the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_service(service_id, name, description, redirect_url, api_spec_file, auth_exclusion_paths, display_name, logo_url, details_image_url, terms_url, privacy_url, docs_url, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param name: Service Name
        :type name: str
        :param description: Service Description
        :type description: str
        :param redirect_url: Redirect URL after a successful login.
        :type redirect_url: str
        :param api_spec_file: openapi service json or yaml file
        :type api_spec_file: bytearray
        :param auth_exclusion_paths: List of paths for which we do not require authentication
        :type auth_exclusion_paths: List[str]
        :param display_name: Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages
        :type display_name: str
        :param logo_url: The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages
        :type logo_url: str
        :param details_image_url: The URL of image showing details about the service to be displayed on the sign-up page.
        :type details_image_url: str
        :param terms_url: The URL for the terms of the service
        :type terms_url: str
        :param privacy_url: The URL for the privacy of the service
        :type privacy_url: str
        :param docs_url: The URL for the documentatio of the service
        :type docs_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServiceResponseObj
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_service_with_http_info(service_id, name, description, redirect_url, api_spec_file, auth_exclusion_paths, display_name, logo_url, details_image_url, terms_url, privacy_url, docs_url, **kwargs)  # noqa: E501

    @validate_arguments
    def update_service_with_http_info(self, service_id : StrictStr, name : Annotated[Optional[StrictStr], Field(description="Service Name")] = None, description : Annotated[Optional[StrictStr], Field(description="Service Description")] = None, redirect_url : Annotated[Optional[StrictStr], Field(description="Redirect URL after a successful login.")] = None, api_spec_file : Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="openapi service json or yaml file")] = None, auth_exclusion_paths : Annotated[Optional[conlist(StrictStr)], Field(description="List of paths for which we do not require authentication")] = None, display_name : Annotated[Optional[StrictStr], Field(description="Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages")] = None, logo_url : Annotated[Optional[StrictStr], Field(description="The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages")] = None, details_image_url : Annotated[Optional[StrictStr], Field(description="The URL of image showing details about the service to be displayed on the sign-up page.")] = None, terms_url : Annotated[Optional[StrictStr], Field(description="The URL for the terms of the service")] = None, privacy_url : Annotated[Optional[StrictStr], Field(description="The URL for the privacy of the service")] = None, docs_url : Annotated[Optional[StrictStr], Field(description="The URL for the documentatio of the service")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Service  # noqa: E501

        Update Service. Requires bearer token authorization for the caller updating the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_service_with_http_info(service_id, name, description, redirect_url, api_spec_file, auth_exclusion_paths, display_name, logo_url, details_image_url, terms_url, privacy_url, docs_url, async_req=True)
        >>> result = thread.get()

        :param service_id: (required)
        :type service_id: str
        :param name: Service Name
        :type name: str
        :param description: Service Description
        :type description: str
        :param redirect_url: Redirect URL after a successful login.
        :type redirect_url: str
        :param api_spec_file: openapi service json or yaml file
        :type api_spec_file: bytearray
        :param auth_exclusion_paths: List of paths for which we do not require authentication
        :type auth_exclusion_paths: List[str]
        :param display_name: Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages
        :type display_name: str
        :param logo_url: The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages
        :type logo_url: str
        :param details_image_url: The URL of image showing details about the service to be displayed on the sign-up page.
        :type details_image_url: str
        :param terms_url: The URL for the terms of the service
        :type terms_url: str
        :param privacy_url: The URL for the privacy of the service
        :type privacy_url: str
        :param docs_url: The URL for the documentatio of the service
        :type docs_url: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServiceResponseObj, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'service_id',
            'name',
            'description',
            'redirect_url',
            'api_spec_file',
            'auth_exclusion_paths',
            'display_name',
            'logo_url',
            'details_image_url',
            'terms_url',
            'privacy_url',
            'docs_url'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['service_id']:
            _path_params['serviceId'] = _params['service_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['name']:
            _form_params.append(('name', _params['name']))

        if _params['description']:
            _form_params.append(('description', _params['description']))

        if _params['redirect_url']:
            _form_params.append(('redirectUrl', _params['redirect_url']))

        if _params['api_spec_file']:
            _files['apiSpecFile'] = _params['api_spec_file']

        if _params['auth_exclusion_paths']:
            _form_params.append(('authExclusionPaths', _params['auth_exclusion_paths']))
            _collection_formats['authExclusionPaths'] = 'csv'

        if _params['display_name']:
            _form_params.append(('displayName', _params['display_name']))

        if _params['logo_url']:
            _form_params.append(('logoUrl', _params['logo_url']))

        if _params['details_image_url']:
            _form_params.append(('detailsImageUrl', _params['details_image_url']))

        if _params['terms_url']:
            _form_params.append(('termsUrl', _params['terms_url']))

        if _params['privacy_url']:
            _form_params.append(('privacyUrl', _params['privacy_url']))

        if _params['docs_url']:
            _form_params.append(('docsUrl', _params['docs_url']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ServiceResponseObj",
            '400': "BadRequestException",
            '401': "UnauthorizedException",
            '409': "ConflictException",
            '429': "TooManyRequestsException",
            '500': "InternalServerErrorException",
        }

        return self.api_client.call_api(
            '/service/{serviceId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
