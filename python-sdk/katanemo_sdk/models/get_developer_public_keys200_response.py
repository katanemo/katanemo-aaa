# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, conlist
from katanemo_sdk.models.oidc_public_key import OIDCPublicKey

class GetDeveloperPublicKeys200Response(BaseModel):
    """
    GetDeveloperPublicKeys200Response
    """
    keys: Optional[conlist(OIDCPublicKey)] = None
    __properties = ["keys"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetDeveloperPublicKeys200Response:
        """Create an instance of GetDeveloperPublicKeys200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in keys (list)
        _items = []
        if self.keys:
            for _item in self.keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetDeveloperPublicKeys200Response:
        """Create an instance of GetDeveloperPublicKeys200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetDeveloperPublicKeys200Response.parse_obj(obj)

        _obj = GetDeveloperPublicKeys200Response.parse_obj({
            "keys": [OIDCPublicKey.from_dict(_item) for _item in obj.get("keys")] if obj.get("keys") is not None else None
        })
        return _obj

