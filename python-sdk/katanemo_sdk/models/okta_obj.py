# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern [API-first] software companies.

    Public APIs of Katanemo. With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class OktaObj(BaseModel):
    """
    OktaObj
    """
    org_name: StrictStr = Field(..., alias="orgName", description="Okta organization name")
    client_id: StrictStr = Field(..., alias="clientId")
    client_secret: StrictStr = Field(..., alias="clientSecret")
    nonce: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    account_id: Optional[StrictStr] = Field(None, alias="accountId")
    service_id: Optional[StrictStr] = Field(None, alias="serviceId")
    authorization_endpoint: Optional[StrictStr] = Field(None, alias="authorizationEndpoint")
    token_endpoint: Optional[StrictStr] = Field(None, alias="tokenEndpoint")
    user_info_endpoint: Optional[StrictStr] = Field(None, alias="userInfoEndpoint")
    issuer_endpoint: Optional[StrictStr] = Field(None, alias="issuerEndpoint")
    connection_id: Optional[StrictStr] = Field(None, alias="connectionId")
    __properties = ["orgName", "clientId", "clientSecret", "nonce", "state", "accountId", "serviceId", "authorizationEndpoint", "tokenEndpoint", "userInfoEndpoint", "issuerEndpoint", "connectionId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OktaObj:
        """Create an instance of OktaObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OktaObj:
        """Create an instance of OktaObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OktaObj.parse_obj(obj)

        _obj = OktaObj.parse_obj({
            "org_name": obj.get("orgName"),
            "client_id": obj.get("clientId"),
            "client_secret": obj.get("clientSecret"),
            "nonce": obj.get("nonce"),
            "state": obj.get("state"),
            "account_id": obj.get("accountId"),
            "service_id": obj.get("serviceId"),
            "authorization_endpoint": obj.get("authorizationEndpoint"),
            "token_endpoint": obj.get("tokenEndpoint"),
            "user_info_endpoint": obj.get("userInfoEndpoint"),
            "issuer_endpoint": obj.get("issuerEndpoint"),
            "connection_id": obj.get("connectionId")
        })
        return _obj

