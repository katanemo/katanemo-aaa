# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class AuditLogEntry(BaseModel):
    """
    AuditLogEntry
    """
    timestamp: StrictStr = Field(...)
    account_id: StrictStr = Field(..., alias="accountId")
    service_id: StrictStr = Field(..., alias="serviceId")
    path: StrictStr = Field(...)
    operation: StrictStr = Field(...)
    principal: StrictStr = Field(...)
    authentication_code: StrictInt = Field(..., alias="authenticationCode")
    authorization_code: StrictInt = Field(..., alias="authorizationCode")
    __properties = ["timestamp", "accountId", "serviceId", "path", "operation", "principal", "authenticationCode", "authorizationCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuditLogEntry:
        """Create an instance of AuditLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuditLogEntry:
        """Create an instance of AuditLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuditLogEntry.parse_obj(obj)

        _obj = AuditLogEntry.parse_obj({
            "timestamp": obj.get("timestamp"),
            "account_id": obj.get("accountId"),
            "service_id": obj.get("serviceId"),
            "path": obj.get("path"),
            "operation": obj.get("operation"),
            "principal": obj.get("principal"),
            "authentication_code": obj.get("authenticationCode"),
            "authorization_code": obj.get("authorizationCode")
        })
        return _obj

