# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern [API-first] software companies.

    Public APIs of Katanemo. With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class User(BaseModel):
    """
    User
    """
    account_id: StrictStr = Field(..., alias="accountId", description="Tenant name")
    service_id: Optional[StrictStr] = Field(None, alias="serviceId", description="Service ID which this account subscribed to")
    user_id: Optional[StrictStr] = Field(None, alias="userId", description="User name (email)")
    is_admin: Optional[StrictBool] = Field(None, alias="isAdmin", description="is the user an admin?")
    is_active: Optional[StrictBool] = Field(None, alias="isActive", description="Is the user active yet?")
    token: Optional[StrictStr] = Field(None, description="User token")
    tags: Optional[Dict[str, conlist(StrictStr)]] = None
    roles: Optional[conlist(StrictStr)] = None
    __properties = ["accountId", "serviceId", "userId", "isAdmin", "isActive", "token", "tags", "roles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "account_id": obj.get("accountId"),
            "service_id": obj.get("serviceId"),
            "user_id": obj.get("userId"),
            "is_admin": obj.get("isAdmin"),
            "is_active": obj.get("isActive"),
            "token": obj.get("token"),
            "tags": obj.get("tags"),
            "roles": obj.get("roles")
        })
        return _obj

