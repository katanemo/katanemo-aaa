# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from katanemo_sdk import schemas  # noqa: F401


class CreateServiceRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "redirectUrl",
            "apiSpecFile",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            redirectUrl = schemas.StrSchema
            apiSpecFile = schemas.BinarySchema
            description = schemas.StrSchema
            
            
            class authExclusionPaths(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authExclusionPaths':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            displayName = schemas.StrSchema
            logoUrl = schemas.StrSchema
            detailsImageUrl = schemas.StrSchema
            termsUrl = schemas.StrSchema
            privacyUrl = schemas.StrSchema
            docsUrl = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "redirectUrl": redirectUrl,
                "apiSpecFile": apiSpecFile,
                "description": description,
                "authExclusionPaths": authExclusionPaths,
                "displayName": displayName,
                "logoUrl": logoUrl,
                "detailsImageUrl": detailsImageUrl,
                "termsUrl": termsUrl,
                "privacyUrl": privacyUrl,
                "docsUrl": docsUrl,
            }
    
    redirectUrl: MetaOapg.properties.redirectUrl
    apiSpecFile: MetaOapg.properties.apiSpecFile
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiSpecFile"]) -> MetaOapg.properties.apiSpecFile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authExclusionPaths"]) -> MetaOapg.properties.authExclusionPaths: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detailsImageUrl"]) -> MetaOapg.properties.detailsImageUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termsUrl"]) -> MetaOapg.properties.termsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacyUrl"]) -> MetaOapg.properties.privacyUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docsUrl"]) -> MetaOapg.properties.docsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "redirectUrl", "apiSpecFile", "description", "authExclusionPaths", "displayName", "logoUrl", "detailsImageUrl", "termsUrl", "privacyUrl", "docsUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiSpecFile"]) -> MetaOapg.properties.apiSpecFile: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authExclusionPaths"]) -> typing.Union[MetaOapg.properties.authExclusionPaths, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUrl"]) -> typing.Union[MetaOapg.properties.logoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detailsImageUrl"]) -> typing.Union[MetaOapg.properties.detailsImageUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termsUrl"]) -> typing.Union[MetaOapg.properties.termsUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacyUrl"]) -> typing.Union[MetaOapg.properties.privacyUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docsUrl"]) -> typing.Union[MetaOapg.properties.docsUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "redirectUrl", "apiSpecFile", "description", "authExclusionPaths", "displayName", "logoUrl", "detailsImageUrl", "termsUrl", "privacyUrl", "docsUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        redirectUrl: typing.Union[MetaOapg.properties.redirectUrl, str, ],
        apiSpecFile: typing.Union[MetaOapg.properties.apiSpecFile, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        authExclusionPaths: typing.Union[MetaOapg.properties.authExclusionPaths, list, tuple, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        logoUrl: typing.Union[MetaOapg.properties.logoUrl, str, schemas.Unset] = schemas.unset,
        detailsImageUrl: typing.Union[MetaOapg.properties.detailsImageUrl, str, schemas.Unset] = schemas.unset,
        termsUrl: typing.Union[MetaOapg.properties.termsUrl, str, schemas.Unset] = schemas.unset,
        privacyUrl: typing.Union[MetaOapg.properties.privacyUrl, str, schemas.Unset] = schemas.unset,
        docsUrl: typing.Union[MetaOapg.properties.docsUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateServiceRequest':
        return super().__new__(
            cls,
            *_args,
            redirectUrl=redirectUrl,
            apiSpecFile=apiSpecFile,
            name=name,
            description=description,
            authExclusionPaths=authExclusionPaths,
            displayName=displayName,
            logoUrl=logoUrl,
            detailsImageUrl=detailsImageUrl,
            termsUrl=termsUrl,
            privacyUrl=privacyUrl,
            docsUrl=docsUrl,
            _configuration=_configuration,
            **kwargs,
        )
