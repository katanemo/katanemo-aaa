# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from katanemo_sdk import schemas  # noqa: F401


class AuditLogEntry(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "principal",
            "accountId",
            "path",
            "authorizationCode",
            "authenticationCode",
            "serviceId",
            "operation",
            "timestamp",
        }
        
        class properties:
            timestamp = schemas.StrSchema
            accountId = schemas.StrSchema
            serviceId = schemas.StrSchema
            path = schemas.StrSchema
            operation = schemas.StrSchema
            principal = schemas.StrSchema
            authenticationCode = schemas.IntSchema
            authorizationCode = schemas.IntSchema
            __annotations__ = {
                "timestamp": timestamp,
                "accountId": accountId,
                "serviceId": serviceId,
                "path": path,
                "operation": operation,
                "principal": principal,
                "authenticationCode": authenticationCode,
                "authorizationCode": authorizationCode,
            }

    
    principal: MetaOapg.properties.principal
    accountId: MetaOapg.properties.accountId
    path: MetaOapg.properties.path
    authorizationCode: MetaOapg.properties.authorizationCode
    authenticationCode: MetaOapg.properties.authenticationCode
    serviceId: MetaOapg.properties.serviceId
    operation: MetaOapg.properties.operation
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceId"]) -> MetaOapg.properties.serviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["principal"]) -> MetaOapg.properties.principal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authenticationCode"]) -> MetaOapg.properties.authenticationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationCode"]) -> MetaOapg.properties.authorizationCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "accountId", "serviceId", "path", "operation", "principal", "authenticationCode", "authorizationCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceId"]) -> MetaOapg.properties.serviceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["principal"]) -> MetaOapg.properties.principal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authenticationCode"]) -> MetaOapg.properties.authenticationCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationCode"]) -> MetaOapg.properties.authorizationCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "accountId", "serviceId", "path", "operation", "principal", "authenticationCode", "authorizationCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        principal: typing.Union[MetaOapg.properties.principal, str, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        path: typing.Union[MetaOapg.properties.path, str, ],
        authorizationCode: typing.Union[MetaOapg.properties.authorizationCode, decimal.Decimal, int, ],
        authenticationCode: typing.Union[MetaOapg.properties.authenticationCode, decimal.Decimal, int, ],
        serviceId: typing.Union[MetaOapg.properties.serviceId, str, ],
        operation: typing.Union[MetaOapg.properties.operation, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuditLogEntry':
        return super().__new__(
            cls,
            *_args,
            principal=principal,
            accountId=accountId,
            path=path,
            authorizationCode=authorizationCode,
            authenticationCode=authenticationCode,
            serviceId=serviceId,
            operation=operation,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )
