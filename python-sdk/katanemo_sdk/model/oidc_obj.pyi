# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from katanemo_sdk import schemas  # noqa: F401


class OIDCObj(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "clientId",
            "clientSecret",
            "oidcConfigEndpoint",
        }
        
        class properties:
            oidcConfigEndpoint = schemas.StrSchema
            clientId = schemas.StrSchema
            clientSecret = schemas.StrSchema
            redirectURL = schemas.StrSchema
            name = schemas.StrSchema
            nonce = schemas.StrSchema
            state = schemas.StrSchema
            accountId = schemas.StrSchema
            serviceId = schemas.StrSchema
            authorizationEndpoint = schemas.StrSchema
            tokenEndpoint = schemas.StrSchema
            userInfoEndpoint = schemas.StrSchema
            issuerEndpoint = schemas.StrSchema
            jwksEndpoint = schemas.StrSchema
            connectionId = schemas.StrSchema
            __annotations__ = {
                "oidcConfigEndpoint": oidcConfigEndpoint,
                "clientId": clientId,
                "clientSecret": clientSecret,
                "redirectURL": redirectURL,
                "name": name,
                "nonce": nonce,
                "state": state,
                "accountId": accountId,
                "serviceId": serviceId,
                "authorizationEndpoint": authorizationEndpoint,
                "tokenEndpoint": tokenEndpoint,
                "userInfoEndpoint": userInfoEndpoint,
                "issuerEndpoint": issuerEndpoint,
                "jwksEndpoint": jwksEndpoint,
                "connectionId": connectionId,
            }

    
    clientId: MetaOapg.properties.clientId
    clientSecret: MetaOapg.properties.clientSecret
    oidcConfigEndpoint: MetaOapg.properties.oidcConfigEndpoint
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oidcConfigEndpoint"]) -> MetaOapg.properties.oidcConfigEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientId"]) -> MetaOapg.properties.clientId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientSecret"]) -> MetaOapg.properties.clientSecret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirectURL"]) -> MetaOapg.properties.redirectURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceId"]) -> MetaOapg.properties.serviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationEndpoint"]) -> MetaOapg.properties.authorizationEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenEndpoint"]) -> MetaOapg.properties.tokenEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userInfoEndpoint"]) -> MetaOapg.properties.userInfoEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuerEndpoint"]) -> MetaOapg.properties.issuerEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jwksEndpoint"]) -> MetaOapg.properties.jwksEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionId"]) -> MetaOapg.properties.connectionId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["oidcConfigEndpoint", "clientId", "clientSecret", "redirectURL", "name", "nonce", "state", "accountId", "serviceId", "authorizationEndpoint", "tokenEndpoint", "userInfoEndpoint", "issuerEndpoint", "jwksEndpoint", "connectionId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oidcConfigEndpoint"]) -> MetaOapg.properties.oidcConfigEndpoint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientId"]) -> MetaOapg.properties.clientId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientSecret"]) -> MetaOapg.properties.clientSecret: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirectURL"]) -> typing.Union[MetaOapg.properties.redirectURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonce"]) -> typing.Union[MetaOapg.properties.nonce, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> typing.Union[MetaOapg.properties.accountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceId"]) -> typing.Union[MetaOapg.properties.serviceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationEndpoint"]) -> typing.Union[MetaOapg.properties.authorizationEndpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenEndpoint"]) -> typing.Union[MetaOapg.properties.tokenEndpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userInfoEndpoint"]) -> typing.Union[MetaOapg.properties.userInfoEndpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuerEndpoint"]) -> typing.Union[MetaOapg.properties.issuerEndpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jwksEndpoint"]) -> typing.Union[MetaOapg.properties.jwksEndpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionId"]) -> typing.Union[MetaOapg.properties.connectionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["oidcConfigEndpoint", "clientId", "clientSecret", "redirectURL", "name", "nonce", "state", "accountId", "serviceId", "authorizationEndpoint", "tokenEndpoint", "userInfoEndpoint", "issuerEndpoint", "jwksEndpoint", "connectionId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        clientId: typing.Union[MetaOapg.properties.clientId, str, ],
        clientSecret: typing.Union[MetaOapg.properties.clientSecret, str, ],
        oidcConfigEndpoint: typing.Union[MetaOapg.properties.oidcConfigEndpoint, str, ],
        redirectURL: typing.Union[MetaOapg.properties.redirectURL, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        nonce: typing.Union[MetaOapg.properties.nonce, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        accountId: typing.Union[MetaOapg.properties.accountId, str, schemas.Unset] = schemas.unset,
        serviceId: typing.Union[MetaOapg.properties.serviceId, str, schemas.Unset] = schemas.unset,
        authorizationEndpoint: typing.Union[MetaOapg.properties.authorizationEndpoint, str, schemas.Unset] = schemas.unset,
        tokenEndpoint: typing.Union[MetaOapg.properties.tokenEndpoint, str, schemas.Unset] = schemas.unset,
        userInfoEndpoint: typing.Union[MetaOapg.properties.userInfoEndpoint, str, schemas.Unset] = schemas.unset,
        issuerEndpoint: typing.Union[MetaOapg.properties.issuerEndpoint, str, schemas.Unset] = schemas.unset,
        jwksEndpoint: typing.Union[MetaOapg.properties.jwksEndpoint, str, schemas.Unset] = schemas.unset,
        connectionId: typing.Union[MetaOapg.properties.connectionId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OIDCObj':
        return super().__new__(
            cls,
            *_args,
            clientId=clientId,
            clientSecret=clientSecret,
            oidcConfigEndpoint=oidcConfigEndpoint,
            redirectURL=redirectURL,
            name=name,
            nonce=nonce,
            state=state,
            accountId=accountId,
            serviceId=serviceId,
            authorizationEndpoint=authorizationEndpoint,
            tokenEndpoint=tokenEndpoint,
            userInfoEndpoint=userInfoEndpoint,
            issuerEndpoint=issuerEndpoint,
            jwksEndpoint=jwksEndpoint,
            connectionId=connectionId,
            _configuration=_configuration,
            **kwargs,
        )
