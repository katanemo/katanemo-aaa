# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from katanemo_sdk import schemas  # noqa: F401


class PasswordPolicy(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "requireSymbols",
            "requiredNumbers",
            "requireLowerCase",
            "minimumLegnth",
            "requireUpperCase",
        }
        
        class properties:
            minimumLegnth = schemas.Int32Schema
            requiredNumbers = schemas.BoolSchema
            requireSymbols = schemas.BoolSchema
            requireUpperCase = schemas.BoolSchema
            requireLowerCase = schemas.BoolSchema
            __annotations__ = {
                "minimumLegnth": minimumLegnth,
                "requiredNumbers": requiredNumbers,
                "requireSymbols": requireSymbols,
                "requireUpperCase": requireUpperCase,
                "requireLowerCase": requireLowerCase,
            }

    
    requireSymbols: MetaOapg.properties.requireSymbols
    requiredNumbers: MetaOapg.properties.requiredNumbers
    requireLowerCase: MetaOapg.properties.requireLowerCase
    minimumLegnth: MetaOapg.properties.minimumLegnth
    requireUpperCase: MetaOapg.properties.requireUpperCase
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumLegnth"]) -> MetaOapg.properties.minimumLegnth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredNumbers"]) -> MetaOapg.properties.requiredNumbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requireSymbols"]) -> MetaOapg.properties.requireSymbols: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requireUpperCase"]) -> MetaOapg.properties.requireUpperCase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requireLowerCase"]) -> MetaOapg.properties.requireLowerCase: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["minimumLegnth", "requiredNumbers", "requireSymbols", "requireUpperCase", "requireLowerCase", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumLegnth"]) -> MetaOapg.properties.minimumLegnth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredNumbers"]) -> MetaOapg.properties.requiredNumbers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requireSymbols"]) -> MetaOapg.properties.requireSymbols: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requireUpperCase"]) -> MetaOapg.properties.requireUpperCase: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requireLowerCase"]) -> MetaOapg.properties.requireLowerCase: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["minimumLegnth", "requiredNumbers", "requireSymbols", "requireUpperCase", "requireLowerCase", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        requireSymbols: typing.Union[MetaOapg.properties.requireSymbols, bool, ],
        requiredNumbers: typing.Union[MetaOapg.properties.requiredNumbers, bool, ],
        requireLowerCase: typing.Union[MetaOapg.properties.requireLowerCase, bool, ],
        minimumLegnth: typing.Union[MetaOapg.properties.minimumLegnth, decimal.Decimal, int, ],
        requireUpperCase: typing.Union[MetaOapg.properties.requireUpperCase, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PasswordPolicy':
        return super().__new__(
            cls,
            *_args,
            requireSymbols=requireSymbols,
            requiredNumbers=requiredNumbers,
            requireLowerCase=requireLowerCase,
            minimumLegnth=minimumLegnth,
            requireUpperCase=requireUpperCase,
            _configuration=_configuration,
            **kwargs,
        )
