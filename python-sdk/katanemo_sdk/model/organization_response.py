# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from katanemo_sdk import schemas  # noqa: F401


class OrganizationResponse(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "accountId",
            "adminAccount",
            "name",
        }
        
        class properties:
            accountId = schemas.StrSchema
            name = schemas.StrSchema
            adminAccount = schemas.StrSchema
            domainVerificationCode = schemas.StrSchema
            domain = schemas.StrSchema
            domainVerified = schemas.BoolSchema
            usersCount = schemas.IntSchema
            rolesCount = schemas.IntSchema
            oidcConnectionsCount = schemas.IntSchema
            samlConnectionsCount = schemas.IntSchema
            defaultConnection = schemas.StrSchema
            defaultConnectionType = schemas.StrSchema
            
            
            class launchedServices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'launchedServices':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class subscribedServices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscribedServices':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class subscribers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscribers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "accountId": accountId,
                "name": name,
                "adminAccount": adminAccount,
                "domainVerificationCode": domainVerificationCode,
                "domain": domain,
                "domainVerified": domainVerified,
                "usersCount": usersCount,
                "rolesCount": rolesCount,
                "oidcConnectionsCount": oidcConnectionsCount,
                "samlConnectionsCount": samlConnectionsCount,
                "defaultConnection": defaultConnection,
                "defaultConnectionType": defaultConnectionType,
                "launchedServices": launchedServices,
                "subscribedServices": subscribedServices,
                "subscribers": subscribers,
            }

    
    accountId: MetaOapg.properties.accountId
    adminAccount: MetaOapg.properties.adminAccount
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminAccount"]) -> MetaOapg.properties.adminAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainVerificationCode"]) -> MetaOapg.properties.domainVerificationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainVerified"]) -> MetaOapg.properties.domainVerified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usersCount"]) -> MetaOapg.properties.usersCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rolesCount"]) -> MetaOapg.properties.rolesCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oidcConnectionsCount"]) -> MetaOapg.properties.oidcConnectionsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["samlConnectionsCount"]) -> MetaOapg.properties.samlConnectionsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultConnection"]) -> MetaOapg.properties.defaultConnection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultConnectionType"]) -> MetaOapg.properties.defaultConnectionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["launchedServices"]) -> MetaOapg.properties.launchedServices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribedServices"]) -> MetaOapg.properties.subscribedServices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribers"]) -> MetaOapg.properties.subscribers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountId", "name", "adminAccount", "domainVerificationCode", "domain", "domainVerified", "usersCount", "rolesCount", "oidcConnectionsCount", "samlConnectionsCount", "defaultConnection", "defaultConnectionType", "launchedServices", "subscribedServices", "subscribers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminAccount"]) -> MetaOapg.properties.adminAccount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainVerificationCode"]) -> typing.Union[MetaOapg.properties.domainVerificationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainVerified"]) -> typing.Union[MetaOapg.properties.domainVerified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usersCount"]) -> typing.Union[MetaOapg.properties.usersCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rolesCount"]) -> typing.Union[MetaOapg.properties.rolesCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oidcConnectionsCount"]) -> typing.Union[MetaOapg.properties.oidcConnectionsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["samlConnectionsCount"]) -> typing.Union[MetaOapg.properties.samlConnectionsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultConnection"]) -> typing.Union[MetaOapg.properties.defaultConnection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultConnectionType"]) -> typing.Union[MetaOapg.properties.defaultConnectionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["launchedServices"]) -> typing.Union[MetaOapg.properties.launchedServices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribedServices"]) -> typing.Union[MetaOapg.properties.subscribedServices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribers"]) -> typing.Union[MetaOapg.properties.subscribers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountId", "name", "adminAccount", "domainVerificationCode", "domain", "domainVerified", "usersCount", "rolesCount", "oidcConnectionsCount", "samlConnectionsCount", "defaultConnection", "defaultConnectionType", "launchedServices", "subscribedServices", "subscribers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        adminAccount: typing.Union[MetaOapg.properties.adminAccount, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        domainVerificationCode: typing.Union[MetaOapg.properties.domainVerificationCode, str, schemas.Unset] = schemas.unset,
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        domainVerified: typing.Union[MetaOapg.properties.domainVerified, bool, schemas.Unset] = schemas.unset,
        usersCount: typing.Union[MetaOapg.properties.usersCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rolesCount: typing.Union[MetaOapg.properties.rolesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        oidcConnectionsCount: typing.Union[MetaOapg.properties.oidcConnectionsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        samlConnectionsCount: typing.Union[MetaOapg.properties.samlConnectionsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        defaultConnection: typing.Union[MetaOapg.properties.defaultConnection, str, schemas.Unset] = schemas.unset,
        defaultConnectionType: typing.Union[MetaOapg.properties.defaultConnectionType, str, schemas.Unset] = schemas.unset,
        launchedServices: typing.Union[MetaOapg.properties.launchedServices, list, tuple, schemas.Unset] = schemas.unset,
        subscribedServices: typing.Union[MetaOapg.properties.subscribedServices, list, tuple, schemas.Unset] = schemas.unset,
        subscribers: typing.Union[MetaOapg.properties.subscribers, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationResponse':
        return super().__new__(
            cls,
            *_args,
            accountId=accountId,
            adminAccount=adminAccount,
            name=name,
            domainVerificationCode=domainVerificationCode,
            domain=domain,
            domainVerified=domainVerified,
            usersCount=usersCount,
            rolesCount=rolesCount,
            oidcConnectionsCount=oidcConnectionsCount,
            samlConnectionsCount=samlConnectionsCount,
            defaultConnection=defaultConnection,
            defaultConnectionType=defaultConnectionType,
            launchedServices=launchedServices,
            subscribedServices=subscribedServices,
            subscribers=subscribers,
            _configuration=_configuration,
            **kwargs,
        )
