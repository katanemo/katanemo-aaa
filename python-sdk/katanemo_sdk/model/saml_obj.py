# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from katanemo_sdk import schemas  # noqa: F401


class SAMLObj(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "accountId",
            "idProvider",
            "serviceId",
            "defaultRoleId",
        }
        
        class properties:
            idProvider = schemas.StrSchema
            defaultRoleId = schemas.StrSchema
            accountId = schemas.StrSchema
            serviceId = schemas.StrSchema
            connectionId = schemas.StrSchema
            state = schemas.StrSchema
            name = schemas.StrSchema
            loginLink = schemas.StrSchema
            metadataLink = schemas.StrSchema
            acsLink = schemas.StrSchema
            audienceLink = schemas.StrSchema
            
            
            class attributeRoleMappings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AttributeRoleMapping']:
                        return AttributeRoleMapping
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AttributeRoleMapping'], typing.List['AttributeRoleMapping']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attributeRoleMappings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AttributeRoleMapping':
                    return super().__getitem__(i)
            rootURL = schemas.StrSchema
            __annotations__ = {
                "idProvider": idProvider,
                "defaultRoleId": defaultRoleId,
                "accountId": accountId,
                "serviceId": serviceId,
                "connectionId": connectionId,
                "state": state,
                "name": name,
                "loginLink": loginLink,
                "metadataLink": metadataLink,
                "acsLink": acsLink,
                "audienceLink": audienceLink,
                "attributeRoleMappings": attributeRoleMappings,
                "rootURL": rootURL,
            }

    
    accountId: MetaOapg.properties.accountId
    idProvider: MetaOapg.properties.idProvider
    serviceId: MetaOapg.properties.serviceId
    defaultRoleId: MetaOapg.properties.defaultRoleId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idProvider"]) -> MetaOapg.properties.idProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultRoleId"]) -> MetaOapg.properties.defaultRoleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceId"]) -> MetaOapg.properties.serviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionId"]) -> MetaOapg.properties.connectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loginLink"]) -> MetaOapg.properties.loginLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataLink"]) -> MetaOapg.properties.metadataLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acsLink"]) -> MetaOapg.properties.acsLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audienceLink"]) -> MetaOapg.properties.audienceLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributeRoleMappings"]) -> MetaOapg.properties.attributeRoleMappings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootURL"]) -> MetaOapg.properties.rootURL: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idProvider", "defaultRoleId", "accountId", "serviceId", "connectionId", "state", "name", "loginLink", "metadataLink", "acsLink", "audienceLink", "attributeRoleMappings", "rootURL", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idProvider"]) -> MetaOapg.properties.idProvider: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultRoleId"]) -> MetaOapg.properties.defaultRoleId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceId"]) -> MetaOapg.properties.serviceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionId"]) -> typing.Union[MetaOapg.properties.connectionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loginLink"]) -> typing.Union[MetaOapg.properties.loginLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataLink"]) -> typing.Union[MetaOapg.properties.metadataLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acsLink"]) -> typing.Union[MetaOapg.properties.acsLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audienceLink"]) -> typing.Union[MetaOapg.properties.audienceLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributeRoleMappings"]) -> typing.Union[MetaOapg.properties.attributeRoleMappings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootURL"]) -> typing.Union[MetaOapg.properties.rootURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idProvider", "defaultRoleId", "accountId", "serviceId", "connectionId", "state", "name", "loginLink", "metadataLink", "acsLink", "audienceLink", "attributeRoleMappings", "rootURL", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        idProvider: typing.Union[MetaOapg.properties.idProvider, str, ],
        serviceId: typing.Union[MetaOapg.properties.serviceId, str, ],
        defaultRoleId: typing.Union[MetaOapg.properties.defaultRoleId, str, ],
        connectionId: typing.Union[MetaOapg.properties.connectionId, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        loginLink: typing.Union[MetaOapg.properties.loginLink, str, schemas.Unset] = schemas.unset,
        metadataLink: typing.Union[MetaOapg.properties.metadataLink, str, schemas.Unset] = schemas.unset,
        acsLink: typing.Union[MetaOapg.properties.acsLink, str, schemas.Unset] = schemas.unset,
        audienceLink: typing.Union[MetaOapg.properties.audienceLink, str, schemas.Unset] = schemas.unset,
        attributeRoleMappings: typing.Union[MetaOapg.properties.attributeRoleMappings, list, tuple, schemas.Unset] = schemas.unset,
        rootURL: typing.Union[MetaOapg.properties.rootURL, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SAMLObj':
        return super().__new__(
            cls,
            *_args,
            accountId=accountId,
            idProvider=idProvider,
            serviceId=serviceId,
            defaultRoleId=defaultRoleId,
            connectionId=connectionId,
            state=state,
            name=name,
            loginLink=loginLink,
            metadataLink=metadataLink,
            acsLink=acsLink,
            audienceLink=audienceLink,
            attributeRoleMappings=attributeRoleMappings,
            rootURL=rootURL,
            _configuration=_configuration,
            **kwargs,
        )

from katanemo_sdk.model.attribute_role_mapping import AttributeRoleMapping
