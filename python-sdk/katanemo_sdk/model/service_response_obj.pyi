# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@katanemo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from katanemo_sdk import schemas  # noqa: F401


class ServiceResponseObj(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "apiSpecFileContents",
            "redirectUrl",
            "apis",
            "onboardURL",
            "serviceId",
            "serviceName",
        }
        
        class properties:
            serviceId = schemas.StrSchema
            serviceName = schemas.StrSchema
            onboardURL = schemas.StrSchema
            redirectUrl = schemas.StrSchema
            apiSpecFileContents = schemas.StrSchema
            
            
            class apis(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apis':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            accountId = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class authExclusionPaths(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authExclusionPaths':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            version = schemas.IntSchema
            updatedAt = schemas.Int64Schema
            createdAt = schemas.Int64Schema
            displayName = schemas.StrSchema
            logoUrl = schemas.StrSchema
            detailsImageUrl = schemas.StrSchema
            termsUrl = schemas.StrSchema
            privacyUrl = schemas.StrSchema
            docsUrl = schemas.StrSchema
            __annotations__ = {
                "serviceId": serviceId,
                "serviceName": serviceName,
                "onboardURL": onboardURL,
                "redirectUrl": redirectUrl,
                "apiSpecFileContents": apiSpecFileContents,
                "apis": apis,
                "accountId": accountId,
                "description": description,
                "authExclusionPaths": authExclusionPaths,
                "version": version,
                "updatedAt": updatedAt,
                "createdAt": createdAt,
                "displayName": displayName,
                "logoUrl": logoUrl,
                "detailsImageUrl": detailsImageUrl,
                "termsUrl": termsUrl,
                "privacyUrl": privacyUrl,
                "docsUrl": docsUrl,
            }

    
    apiSpecFileContents: MetaOapg.properties.apiSpecFileContents
    redirectUrl: MetaOapg.properties.redirectUrl
    apis: MetaOapg.properties.apis
    onboardURL: MetaOapg.properties.onboardURL
    serviceId: MetaOapg.properties.serviceId
    serviceName: MetaOapg.properties.serviceName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceId"]) -> MetaOapg.properties.serviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceName"]) -> MetaOapg.properties.serviceName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboardURL"]) -> MetaOapg.properties.onboardURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiSpecFileContents"]) -> MetaOapg.properties.apiSpecFileContents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apis"]) -> MetaOapg.properties.apis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authExclusionPaths"]) -> MetaOapg.properties.authExclusionPaths: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detailsImageUrl"]) -> MetaOapg.properties.detailsImageUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termsUrl"]) -> MetaOapg.properties.termsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacyUrl"]) -> MetaOapg.properties.privacyUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docsUrl"]) -> MetaOapg.properties.docsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["serviceId", "serviceName", "onboardURL", "redirectUrl", "apiSpecFileContents", "apis", "accountId", "description", "authExclusionPaths", "version", "updatedAt", "createdAt", "displayName", "logoUrl", "detailsImageUrl", "termsUrl", "privacyUrl", "docsUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceId"]) -> MetaOapg.properties.serviceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceName"]) -> MetaOapg.properties.serviceName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboardURL"]) -> MetaOapg.properties.onboardURL: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiSpecFileContents"]) -> MetaOapg.properties.apiSpecFileContents: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apis"]) -> MetaOapg.properties.apis: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> typing.Union[MetaOapg.properties.accountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authExclusionPaths"]) -> typing.Union[MetaOapg.properties.authExclusionPaths, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUrl"]) -> typing.Union[MetaOapg.properties.logoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detailsImageUrl"]) -> typing.Union[MetaOapg.properties.detailsImageUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termsUrl"]) -> typing.Union[MetaOapg.properties.termsUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacyUrl"]) -> typing.Union[MetaOapg.properties.privacyUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docsUrl"]) -> typing.Union[MetaOapg.properties.docsUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["serviceId", "serviceName", "onboardURL", "redirectUrl", "apiSpecFileContents", "apis", "accountId", "description", "authExclusionPaths", "version", "updatedAt", "createdAt", "displayName", "logoUrl", "detailsImageUrl", "termsUrl", "privacyUrl", "docsUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        apiSpecFileContents: typing.Union[MetaOapg.properties.apiSpecFileContents, str, ],
        redirectUrl: typing.Union[MetaOapg.properties.redirectUrl, str, ],
        apis: typing.Union[MetaOapg.properties.apis, list, tuple, ],
        onboardURL: typing.Union[MetaOapg.properties.onboardURL, str, ],
        serviceId: typing.Union[MetaOapg.properties.serviceId, str, ],
        serviceName: typing.Union[MetaOapg.properties.serviceName, str, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        authExclusionPaths: typing.Union[MetaOapg.properties.authExclusionPaths, list, tuple, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        logoUrl: typing.Union[MetaOapg.properties.logoUrl, str, schemas.Unset] = schemas.unset,
        detailsImageUrl: typing.Union[MetaOapg.properties.detailsImageUrl, str, schemas.Unset] = schemas.unset,
        termsUrl: typing.Union[MetaOapg.properties.termsUrl, str, schemas.Unset] = schemas.unset,
        privacyUrl: typing.Union[MetaOapg.properties.privacyUrl, str, schemas.Unset] = schemas.unset,
        docsUrl: typing.Union[MetaOapg.properties.docsUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServiceResponseObj':
        return super().__new__(
            cls,
            *_args,
            apiSpecFileContents=apiSpecFileContents,
            redirectUrl=redirectUrl,
            apis=apis,
            onboardURL=onboardURL,
            serviceId=serviceId,
            serviceName=serviceName,
            accountId=accountId,
            description=description,
            authExclusionPaths=authExclusionPaths,
            version=version,
            updatedAt=updatedAt,
            createdAt=createdAt,
            displayName=displayName,
            logoUrl=logoUrl,
            detailsImageUrl=detailsImageUrl,
            termsUrl=termsUrl,
            privacyUrl=privacyUrl,
            docsUrl=docsUrl,
            _configuration=_configuration,
            **kwargs,
        )
