# coding: utf-8

"""
    Katanemo Authorizer

    Katanemo authorizer service for AAA  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: info@katanemo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AuthorizationRequest(BaseModel):
    """
    AuthorizationRequest
    """
    token: StrictStr = Field(..., description="Authorization Token")
    path: StrictStr = Field(..., description="Authorization path")
    http_method: StrictStr = Field(..., alias="httpMethod", description="Authorization HTTP Method (GET, POST, PUT, PATCH, DELETE)")
    request_body: Optional[StrictStr] = Field(None, alias="requestBody", description="Requst body in json format")
    __properties = ["token", "path", "httpMethod", "requestBody"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthorizationRequest:
        """Create an instance of AuthorizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthorizationRequest:
        """Create an instance of AuthorizationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthorizationRequest.parse_obj(obj)

        _obj = AuthorizationRequest.parse_obj({
            "token": obj.get("token"),
            "path": obj.get("path"),
            "http_method": obj.get("httpMethod"),
            "request_body": obj.get("requestBody")
        })
        return _obj

