"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[320],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),m=o,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_position:8},i="Scopes (OAuth 2.0)",s={unversionedId:"concepts/scopes-oauth",id:"concepts/scopes-oauth",title:"Scopes (OAuth 2.0)",description:"Katanemo makes working with OAuth2.0 scopes super simple. As an API developer you simply define \u201cservice-defined\u201d Roles in your OpenAPI spec via Katanemo extensions. A \u201cservice-defined\u201d Role is simply a unique name mapped to a set of OpenAPI operations (resource paths and HTTP methods). 3rd party developers simply use \u201cservice-defined\u201d role names as scopes when initiating an OAuth2.0 flow via the /oauth/authorize endpoint for that specific OpenAPI Service instance. Katanemo\u2019s evaluation engine maps OAuth2.0 claims received in the JWT to \u201cservice-defined\u201d Roles via the claim name, and performs the appropriate authorization checks. Note, service-defined Roles can\u2019t be modified by API subscribers.",source:"@site/docs/concepts/scopes-oauth.md",sourceDirName:"concepts",slug:"/concepts/scopes-oauth",permalink:"/katanemo-aaa/docs/concepts/scopes-oauth",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"defaultSidebar",previous:{title:"Keys",permalink:"/katanemo-aaa/docs/concepts/keys"},next:{title:"Crypto Offload",permalink:"/katanemo-aaa/docs/concepts/crypto-offload-and-sessions-tokens"}},c={},p=[],u={toc:p},l="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scopes-oauth-20"},"Scopes (OAuth 2.0)"),(0,o.kt)("p",null,"Katanemo makes working with OAuth2.0 scopes super simple. As an API developer you simply define \u201cservice-defined\u201d Roles in your OpenAPI spec via Katanemo extensions. A \u201cservice-defined\u201d Role is simply a unique name mapped to a set of OpenAPI operations (resource paths and HTTP methods). 3rd party developers simply use \u201cservice-defined\u201d role names as scopes when initiating an OAuth2.0 flow via the ",(0,o.kt)("inlineCode",{parentName:"p"},"/oauth/authorize")," endpoint for that specific OpenAPI Service instance. Katanemo\u2019s ",(0,o.kt)("a",{parentName:"p",href:"#"},"evaluation engine")," maps OAuth2.0 claims received in the JWT to \u201cservice-defined\u201d Roles via the claim name, and performs the appropriate authorization checks. Note, service-defined Roles can\u2019t be modified by API subscribers."))}d.isMDXComponent=!0}}]);