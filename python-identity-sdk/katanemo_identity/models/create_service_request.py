# coding: utf-8

"""
    Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.

    With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.  # noqa: E501

    The version of the OpenAPI document: 0.1.1
    Contact: support@katanemo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictStr, conlist

class CreateServiceRequest(BaseModel):
    """
    CreateServiceRequest
    """
    name: StrictStr = Field(..., description="Service Name")
    description: Optional[StrictStr] = Field(None, description="Service Description")
    redirect_url: StrictStr = Field(..., alias="redirectUrl", description="Redirect URL after a successful login.")
    api_spec_file: Union[StrictBytes, StrictStr] = Field(..., alias="apiSpecFile", description="openapi service json or yaml file")
    auth_exclusion_paths: Optional[conlist(StrictStr)] = Field(None, alias="authExclusionPaths", description="List of paths for which we do not require authentication")
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages")
    logo_url: Optional[StrictStr] = Field(None, alias="logoUrl", description="The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages")
    details_image_url: Optional[StrictStr] = Field(None, alias="detailsImageUrl", description="The URL of image showing details about the service to be displayed on the sign-up page.")
    terms_url: Optional[StrictStr] = Field(None, alias="termsUrl", description="The URL for the terms of the service")
    privacy_url: Optional[StrictStr] = Field(None, alias="privacyUrl", description="The URL for the privacy of the service")
    docs_url: Optional[StrictStr] = Field(None, alias="docsUrl", description="The URL for the documentation of the service")
    __properties = ["name", "description", "redirectUrl", "apiSpecFile", "authExclusionPaths", "displayName", "logoUrl", "detailsImageUrl", "termsUrl", "privacyUrl", "docsUrl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateServiceRequest:
        """Create an instance of CreateServiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateServiceRequest:
        """Create an instance of CreateServiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateServiceRequest.parse_obj(obj)

        _obj = CreateServiceRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "redirect_url": obj.get("redirectUrl"),
            "api_spec_file": obj.get("apiSpecFile"),
            "auth_exclusion_paths": obj.get("authExclusionPaths"),
            "display_name": obj.get("displayName"),
            "logo_url": obj.get("logoUrl"),
            "details_image_url": obj.get("detailsImageUrl"),
            "terms_url": obj.get("termsUrl"),
            "privacy_url": obj.get("privacyUrl"),
            "docs_url": obj.get("docsUrl")
        })
        return _obj

