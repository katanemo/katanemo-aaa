openapi: "3.0.0"
info:
  version: 1.0.0
  title: Katanemo - identity, and fine-grained authorization for modern { API-first } software companies.
  description: With Katanemo developers can add support for users, enterprise SSO, machine keys and fine-grained authorization in minutes.
  termsOfService: https://www.katanemo.com/terms-of-service
  contact:
    name: Katanemo Labs Inc.
    email: support@katanemo.com
    url: https://api.katanemo.com
servers:
  - url: https://api.katanemo.com
tags:
  - name: service
    description: Katanemo's Service related APIs
  - name: sign-up/login
    description: Katanemo's Login and sign-up APIs
  - name: access-control
    description: Katamemo's APIs that help achieve customers and developers achieve fine-grained access controls (roles, abac, etc.)
  - name: organization
    description: Katanemo's Organization (SaaS customers) related APIs
  - name: identity
    description: Katanemo's Identity related APIs
  - name: access-logs
    description: Katanemo's Access logs related APIs
  - name: sso
    description: Katanemo's Enterprise SSO APIs
  - name: arc
    description: Katanemo's Authorization Runtime Client APIs
  - name: health
    description: Katanemo's Health APIs

paths:
  /service:
    post:
      summary: Create Service
      description: Create a Service in Katanemo. Once a service is created Katanemo  identity and authorization capabilities on behalf of SaaS (API) Developers
      operationId: createService
      tags:
        - service
      requestBody:
        description: Details about the service, including the text-representation of the service APIs.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '200':
          description: Service Successfully Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponseObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List Services
      description: List services that belong to a particular developer. Requires bearer token authorization
      operationId: ListServicesByDeveloper
      tags:
        - service
      responses:
        '200':
          description: List all services belonging to a developer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceResponseObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /service/3xA:
    get:
      summary: Get Details for Katanemo AAA
      description: Gets details about Katanemo's AAA SaaS service. Katanemo is powered by Katanemo, and our 3xA service uses the same core identity and authorization capabilities that we offer SaaS (API) developers
      operationId: GetDefaultService
      tags:
        - service
      responses:
        '200':
          description: service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponseObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /service/{serviceId}:
    get:
      summary: Get Service
      description: Gets a Katanemo Service. The principal token must be present in the bearer header to retrieve the service details, unless the service is public
      operationId: getService
      tags:
        - service
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponseObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Service
      description: Update Service. Requires bearer token authorization for the caller updating the service
      operationId: updateService
      tags:
        - service
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Service object of the service being updated.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequest'
      responses:
        '200':
          description: Updated service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponseObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Service
      description: Deletes a service. Note the delete operation is a 'soft' delete where by organizations can't access your service. Requires a bearer token to validate that the caller can delete the service.
      operationId: deleteService
      tags:
        - service
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted service.
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /service/{serviceId}/tags:
    post:
      summary: Add tags to a resource
      description: Add tags (key/value pair) to a particular resource that is created for a service, for a particular organization account id.
      operationId: createTags
      tags:
        - service
        - access-control
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Tags and resource id
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tags'
      responses:
        '200':
          description: User account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Gets tags for a resource
      description: Gets tags associated with a resource of a service
      operationId: GetTagsForResource
      tags:
        - service
        - access-control
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Tags and resource id
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTagsRequest'
      responses:
        '200':
          description: tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
  /service/{serviceId}/.well-known/jwks.json:
    get:
      summary: JWKS endpoint for Service
      description: Gets public key that can be used to verify jwt token issued by Katanemo. This API does not require bearer authorization
      operationId: GetDeveloperPublicKeys
      tags:
        - service
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of public keys for developer
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/OIDCPublicKey'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sign-up/{serviceId}:
    post:
      summary: Sign-up for Service
      description: Onborad customers to a particular SaaS service managed by Katanemo. Generates email verification workflows and creates an organization for the customer subscribing to this particular service
      operationId: serviceSignup
      tags:
        - sign-up/login
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Signup Info of the service developer or a service subscriber
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Signup is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /confirmUser/{confirmationCode}:
    get:
      summary: Confirm User
      description: Confirm that the user belongs to the organization (email) they signed-up with. Used by Katanemo to verify developers signing-up for its 3xA service and for service developers on-boarding their customers (subscribers)
      operationId: confirmUser
      tags:
        - sign-up/login
      parameters:
        - in: path
          name: confirmationCode
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The first user (email) has been subscribed to a particular service and an organization id has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfirmationResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /set-password/{serviceId}:
    post:
      summary: Set Password
      description: Allows the user to set password after verficiation via a session token.
      operationId: setPassword
      tags:
        - sign-up/login
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Set password info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
      responses:
        '200':
          description: Settting pasword for user is successful.
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get password policy
      description: Gets the password policy (length, characters, etc), to help the user set the correct password
      operationId: getPasswordPolicy
      tags:
        - sign-up/login
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "returns the password stregnth needed to successful set password"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordPolicy'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"

  /login-init/{serviceId}:
    post:
      summary: Login-init (SSO vs. Password)
      description: Login-init helps developers determine if the user should be presented a SAML/SSO workflow or a user/password sign-in experience.
      operationId: loginInit
      tags:
        - sign-up/login
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Login info (email) of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialLoginRequest'
      responses:
        '200':
          description: This API is used to determine if the user should login via an email/password combination or if the UI should redirect the user to the Idp for SSO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialLoginResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # TODO: for login and login call methods, have to figure out how to pass the token to redirect URL, most likely that will be
  # passed as a query parameter, but needs more understanding.
  /login/{serviceId}:
    post:
      summary: Login (Password)
      description: Login to any katanemo service. serviceId indicates service user is logging in to.
      operationId: login
      tags:
        - sign-up/login
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Login info of a user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginWithPasswordRequest'
      responses:
        302:
          description: Redirect to default page for developer after succesful login.
          headers:
            Location:
              description: URL of the dashboard page
              schema:
                type: string
        200:
          description: Returns login token in a response object if skipRedirect is set to true.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginToken'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /assignrole:
    post:
      summary: Assign role
      description: Assign role to an identity principal
      operationId: AssignRoleToPrincipal
      tags:
        - access-control
      requestBody:
        description: Role assignment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleObj'
      responses:
        '200':
          description: User account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /assumeRole:
    post:
      summary: Assume role
      description: Creates a token with requested roleId
      operationId: AssumeRole
      tags:
        - access-control
      requestBody:
        description: Role assignment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssumeRoleObj'
      responses:
        '200':
          description: token
          content:
            application/json:
              schema:
                type: string
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org:
    get:
      summary: List Organizations
      description: Returns an object with information regarding an account which is present in the token
      operationId: GetAccountOrganization
      tags:
        - organization
      responses:
        '200':
          description: Organization of the acccount.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}:
    get:
      summary: Get Organization
      description: Returns an object with information regarding an account
      operationId: GetAccountInfo
      tags:
        - organization
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Organization
      description: Returns status code for successful or failed update.
      operationId: UpdateAccountInfo
      tags:
        - organization
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update account object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Successfully updated organization
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /org/{accountId}/verify:
    get:
      summary: Verify Domain
      description: Triggers the domain verification flow. If TXT record is created and has the correct verification code, the domain is verified.
      operationId: VerifyAccountDomain
      tags:
        - organization
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Domain verified
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/user:
    get:
      summary: List Users
      description: Returns a list of all users belonging to provided organization ID
      operationId: GetUsersForAccount
      tags:
        - organization
        - identity
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: users belonging to provided account ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Invite User
      description: Creates a new User and triggers an email verification workflow, followed by set-password
      operationId: createUserForAccount
      tags:
        - organization
        - identity
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/user/{userId}:
    get:

      summary: Get User
      description: Get a specific user for a particular organization
      operationId: GetUser
      tags:
        - organization
        - identity
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user belonging to provided account ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user
      description: Updates a User account
      operationId: updateUser
      tags:
        - organization
        - identity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/role:
    get:
      summary: List Roles
      description: Returns a list of all roles belonging to provided organization ID
      operationId: GetRolesForAccount
      tags:
        - organization
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: roles belonging to provided account ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates Role
      description: Creates a new Role
      operationId: createRole
      tags:
        - organization
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Role to add to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '200':
          description: Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/role/{roleId}:
    get: #TODO: add put, and delete HTTP operations
      summary: Get Role
      description: Gets a particular role for an organization
      operationId: GetRole
      tags:
        - organization
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Role
      description: Update role
      operationId: updateRole
      tags:
        - organization
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Role object that is being updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '200':
          description: Updated service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /org/{accountId}/keys:
    post:
      summary: Create API Key
      description: Creates a new client key for accessing a developers APIs
      operationId: createClientKey
      tags:
        - organization
        - identity
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientKeyRequest'
      responses:
        '200':
          description: Successful org keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKeyResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List API Keys
      description: List all client keys for an organization accessing a developers service
      operationId: getClientKeyList
      tags:
        - organization
        - identity
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of all users successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientKeyObject'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/key/{keyId}:
    get:
      summary: Get API Key
      description: Get details of a particular API key for an organization.
      operationId: getClientKey
      tags:
        - organization
        - identity
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Getting client key successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKeyObject'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete API Key
      description: Delete a particular API Key for an organization.
      operationId: deleteClientKey
      tags:
        - organization
        - identity
        - access-control
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful deletion of client key.
          content:
            application/json:
              schema:
                type: string
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /token:
    post:
      summary: Get Token
      description: Returns a short-lived token for API key/secret pair. Tokens contain claims that identify what a principal can or cannot do.
      operationId: getShortTermToken
      tags:
        - access-control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Generate Token for an authentication principal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /oauth/token:
    post:
      summary: OAuth Token
      description: Get an OAuth2.0 Token for an Authorization Code
      operationId: getOAuthToken
      tags:
        - access-control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthTokenRequest'
      responses:
        '200':
          description: Getting token for client ID successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /org/{accountId}/sso-connections/oidc:
    get:
      summary: List OIDC Connections
      description: Returns a list of all OIDC connections belonging to provided organization
      operationId: GetOIDCConnectionsForAccount
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OIDC connections belonging to provided account ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OIDCObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates OIDC connection
      description: Creates a new OIDC connection
      operationId: createOIDCCOnnection
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ODIC connection attributes
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OIDCObj'
      responses:
        '200':
          description: OIDCObj
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/oidc/{connectionId}:
    put:
      summary: Update OIDC connection
      description: Updates a OIDC connection
      operationId: updateOIDCConnection
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: OIDC connection attributes
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OIDCObj'
      responses:
        '200':
          description: SAMLObj
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get OIDC connection
      description: Get details of an OIDC connection
      operationId: getOIDCConnection
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OIDCObj
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete OIDC connection
      description: Delete an OIDC connection
      operationId: deleteOIDCConnection
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deletion successful.
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/oidc/{connectionId}/login-trigger: #TODO: accountId shouldn't be needed here.
    get:
      summary: Trigger OIDC SSO
      description: Triggers SSO for a particular OIDC connection. This would be initiated by the developer from applicatoon code
      operationId: OIDCLoginTrigger
      tags:
        - sso
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
        - name: accountId #TODO: account ID really not needed here.
          in: path
          required: true
          schema:
            type: string
      responses:
      # No response, it actually redirects to the login URL corresponding to connection ID
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/oidc/{connectionId}/sso-callback:
    get:
      summary: OIDC Callback
      description: Handles OIDC login callback
      operationId: oidcSSOCallBack
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
        - name: code
          in: query
          description: Authorization code returned by the OIDC provider
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: Authorization code returned by the OIDC provider
          required: true
          schema:
            type: string
      responses:
        302: # TODO: do we really need this?
          description: Redirect to default page for developer after succesful login.
          headers:
            Location:
              description: Redirect URL of landing page after successful login.
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/saml:
    get:
      summary: List SAML Connections
      description: Returns a list of all SAML connections belonging to provided organization
      operationId: GetSAMLConnectionsForAccount
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: SAML connections belonging to provided account ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SAMLObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates SAML connection
      description: Creates a new SAML connection
      operationId: createSAMLConnection
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: SAML connection attributes
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SAMLObj'
      responses:
        '200':
          description: SAMLObj
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SAMLObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/saml/{connectionId}:
    put:
      summary: Update SAML connection
      description: Updates a SAML connection
      operationId: updateSAMLConnection
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: SAML connection attributes
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SAMLObj'
      responses:
        '200':
          description: SAMLObj
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SAMLObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get connection
      description: Retreive a SAML connection
      operationId: GetSAMLConnection
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: SAMLObj
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SAMLObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/saml/{connectionId}/mapAttributeToRoles:
    post:
      summary: MAP SAML Attributes
      description: Creates a new attribute mapping for a SAML connection
      operationId: createSAMLConnectionMapping
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: SAML user attributes to role mapping
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeRoleMapping'
      responses:
        '200':
          description: SAMLObj
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SAMLObj'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/saml/{connectionId}/login-trigger: #TODO: accountId shouldn't be needed here.
    get:
      summary: Triggers SAML SSO
      description: Triggers SAML login for a particular connection. Account can have multiple SAML connections. It redirects to the login URL corresponding to a particular connection.
      operationId: SAMLLoginTrigger
      tags:
        - sso
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
        - name: accountId #TODO: account ID really not needed here.
          in: path
          required: true
          schema:
            type: string
      responses:
      # No response, it actually redirects to the login URL corresponding to connection ID
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /org/{accountId}/sso-connections/saml/{connectionId}/sso-callback/saml/acs:
  # TODO: check if saml/acs should always be part of the callback URL
    post:
      summary: SAML Callback
      description: Handle SAML login callback with SAML assertion. It can be passed as query parameter or payload.
      operationId: samlSSOCallBack
      tags:
        - sso
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
        - name: SAMLResponse
          in: query
          description: SAML response returned by the SAML IDP
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                SAMLResponse:
                  type: string
                  description: SAML response returned by the SAML IDP
      responses:
        302: # TODO: check if this is needed to be specified here.
          description: Redirect to default page for developer after succesful login.
          headers:
            Location:
              description: Redirect URL of landing page after successful login.
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /arc/{serviceId}/role:
    get:
      summary: Get Service Roles
      operationId: GetRolesForService
      tags:
        - arc
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Successful retrieval of roles for service.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleResponse'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /arc/{serviceId}/tags:
    get:
      summary: Get Resource Tags
      description: Get all resource tags associated with a Katanemo Service.
      operationId: GetTagsForService
      tags:
        - arc
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Successful retrieval of tags for service.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tags'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /arc/{serviceId}/init:
    get:
      summary: Initialize ARC Client
      description: Initiative the Authorization Runtime Client with Developer API Keys
      operationId: InitArcClient
      tags:
        - arc
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of init arc client.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitArcResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /authorize:
    post:
      summary: dummy endpoint for authorize #TODO: find a better comment
      operationId: PostAuthorize
  /healthz:
    get:
      summary: Return Katanemo Health
      description: This API returns the current health of the Katanemo Contorl Plane and Data Plane services.
      operationId: GetHealthz
      tags:
        - health
      responses:
        '200':
          description: token
          content:
            application/json:
              schema:
                type: string
  /audit-logs/service/{serviceId}/account/{accountId}:
    get:
      summary: List Access logs
      description: Return a list of access logs that belong to a particular service and orgaization
      operationId: GetAuditLogs
      tags:
        - access-logs
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: Start time of log entries in the format YYYY-MM-DDThh-mm-ss (e.g. 2023-01-15T15-28-58 which means 2023-01-15 15:28:58)
          required: true
          schema:
            type: string
        - name: endTime
          in: query
          description: End time of log entries in the format YYYY-MM-DDThh-mm-ss (e.g. 2023-01-15T15-28-58 which means 2023-01-15 15:28:58)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
        '400':
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        '401':
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        '409':
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        '429':
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    InitArcResponse:
      properties:
        queueUrl:
          type: string
        keyId:
          type: string
        keySecret:
          type: string
        sessionToken:
          type: string
        expiration:
          type: integer
    SignupRequest:
      required:
        - emailAddress
      properties:
        emailAddress:
          type: string
          description: Email address of user signing up for the service.
    SignupResponse:
      required:
        - accountId
      properties:
        accountId:
          type: string
          description: Account ID of developer signed up.
    UserConfirmationResponse:
      required:
        - session
        - accountId
        - emailAddress
        - serviceId
      properties:
        session:
          type: string
          description: Session info in response to confirm user. This session can be used to set password.
        accountId:
          type: string
          description: returns the account id for the organization that subscribed to the service.
        emailAddress:
          type: string
          description: returns the email address of the user signing up.
        serviceId:
          type: string
          description: returns the service id for which user subscribed to.
    SetPasswordRequest:
      required:
        - emailAddress
        - session
        - password
      properties:
        emailAddress:
          type: string
          description: Email address of the user.
        session:
          type: string
          description: Session information of the user from confirm user respoonse.
        password:
          type: string
          description: Password of the user for the user to be used in future.
    InitialLoginRequest:
      required:
        - emailAddress
      properties:
        emailAddress:
          type: string
          description: Email address of the developer account's user
    InitialLoginResponse:
      required:
        - ssoEnabled
      properties:
        ssoEnabled:
          type: boolean
          description: Determines if sso is enabled or not
        ssoRedirectUrl:
          type: string
          description: If sso is enabled then have to make call to sso endpoint for authentication
          # TODO: also check with other parameters are needed for sso login
          # TODO: can sso login for a user possible without having account?
    LoginWithPasswordRequest:
      required:
        - emailAddress
        - password
      properties:
        emailAddress:
          type: string
          description: Email address of the developer account's user
        password:
          type: string
          description: Password of the user
        skipRedirect:
          type: boolean
          description: By default login will redirect to service redirect URL, if this parameter is set as true then response will be returned.
    LoginToken:
      required:
        - token
      properties:
        token:
          type: string
          description: Login Token
    CreateServiceRequest:
      type: object
      required:
        - name
        - apiSpecFile
        - redirectUrl
      properties:
        name:
          type: string
          description: Service Name
        description:
          type: string
          description: Service Description
        redirectUrl:
          type: string
          description: Redirect URL after a successful login.
        apiSpecFile:
          type: string
          format: binary
          description: openapi service json or yaml file
        authExclusionPaths:
          type: array
          items:
            type: string
          description: List of paths for which we do not require authentication
        displayName:
          type: string
          description: Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages
        logoUrl:
          type: string
          description: The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages
        detailsImageUrl:
          type: string
          description: The URL of image showing details about the service to be displayed on the sign-up page.
        termsUrl:
          type: string
          description: The URL for the terms of the service
        privacyUrl:
          type: string
          description: The URL for the privacy of the service
        docsUrl:
          type: string
          description: The URL for the documentation of the service
    UpdateServiceRequest:
      type: object
      properties:
        name:
          type: string
          description: Service Name
        description:
          type: string
          description: Service Description
        redirectUrl:
          type: string
          description: Redirect URL after a successful login.
        apiSpecFile:
          type: string
          format: binary
          description: openapi service json or yaml file
        authExclusionPaths:
          type: array
          items:
            type: string
          description: List of paths for which we do not require authentication
        displayName:
          type: string
          description: Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages
        logoUrl:
          type: string
          description: The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages
        detailsImageUrl:
          type: string
          description: The URL of image showing details about the service to be displayed on the sign-up page.
        termsUrl:
          type: string
          description: The URL for the terms of the service
        privacyUrl:
          type: string
          description: The URL for the privacy of the service
        docsUrl:
          type: string
          description: The URL for the documentatio of the service
    ServiceResponseObj:
      required:
        - serviceId
        - serviceName
        - onboardURL
        - redirectUrl
        - apiSpecFileContents # should return whole file contents, and have separate api for operations and paths /service/{service-id}/apis
        - apis
      properties:
        accountId:
          type: string
          description: Account ID of service creator
        serviceId:
          type: string
          description: ID of the service
        serviceName:
          type: string
          description: Name of the service
        description:
          type: string
          description: Description of service
        onboardURL:
          type: string
          description: Pretty onboarding URL for the service generated by Katanemo
        redirectUrl:
          type: string
          description: redirect url
        apiSpecFileContents:
          type: string
          description: S3 url of open api spec (Json or yaml) file contents
        apis:
          type: array
          items:
            type: string
          description: List of paths exposed by the service
        authExclusionPaths:
          type: array
          items:
            type: string
          description: List of paths for which we do not require authentication
        version:
          type: integer
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        displayName:
          type: string
          description: Display name of the service/company used in the Sign up, Login, Logout and other relevant branding pages
        logoUrl:
          type: string
          description: The URL for the service/company Logo used in the Sign up, Login, Logout and other relevant branding pages
        detailsImageUrl:
          type: string
          description: The URL of image showing details about the service to be displayed on the sign-up page.
        termsUrl:
          type: string
          description: The URL for the terms of the service
        privacyUrl:
          type: string
          description: The URL for the privacy of the service
        docsUrl:
          type: string
          description: The URL for the documentatio of the service
    OIDCPublicKey:
      properties:
        kid:
          type: string
          description: key id
        alg:
          type: string
          description: Key algorithm
        e:
          type: string
          description: RSA exponent
        n:
          type: string
          description: RSA modulus
        use:
          type: string
          description: key usage
        kty:
          type: string
          description: key type
    OrganizationResponse:
      required:
        - accountId
        - name
        - adminAccount
      properties:
        accountId:
          type: string
        name:
          type: string
        adminAccount:
          type: string
        domainVerificationCode:
          type: string
        domain:
          type: string
        domainVerified:
          type: boolean
        usersCount:
          type: integer
        rolesCount:
          type: integer
        oidcConnectionsCount:
          type: integer
        samlConnectionsCount:
          type: integer
        defaultConnection:
          type: string
        defaultConnectionType:
          type: string
        launchedServices:
          type: array
          items:
            type: string
        subscribedServices:
          type: array
          items:
            type: string
        subscribers:
          type: array
          items:
            type: string
    UserRequest:
      required:
        - accountId
      properties:
        accountId:
          type: string
          description: Tenant name
        userId:
          type: string
          description: email address of the user
        tags:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        roles:
          type: array
          items:
            type: string
          example: ["roleId1", "roleId2", "roleId3"]
    UserResponse:
      required:
        - accountId
      properties:
        accountId:
          type: string
          description: Organization Identifier for a SaaS customer
        serviceId:
          type: string
          description: Service which this account subscribed to
        userId:
          type: string
          description: Email
        isAdmin:
          type: boolean
          description: is the user an admin?
        isActive:
          type: boolean
          description: Is the user active yet?
        token:
          type: string
          description: User token
        tags:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        roles:
          type: array
          items:
            type: string
          example: ["roleId1", "roleId2", "roleId3"]
    AssignRoleObj:
      required:
        - principalId
        - roleId
      properties:
        principalId:
          type: string
        roleId:
          type: string
    AssumeRoleObj:
      required:
        - principalId
        - roleId
      properties:
        principalId:
          type: string
        roleId:
          type: string
    RoleRequest:
      properties:
        accountId:
          type: string
          description: AccountId
        rolename:
          type: string
          description: Role name
        serviceId:
          type: string
          description: ID of the service
        policy:
          $ref: "#/components/schemas/Policy"
    RoleResponse:
      properties:
        accountId:
          type: string
          description: AccountId
        roleId:
          type: string
          description: Role Id
        rolename:
          type: string
          description: Role name
        serviceId:
          type: string
          description: ID of the service
        policy:
          $ref: "#/components/schemas/Policy"
        version:
          type: integer
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
    Policy:
      required:
        - policyContent
      properties:
        policyContent:
          type: string
          description: Policy rules for allowing API paths, it can be defined as json or yaml format.
        # # Sample yaml policy
        # version: '1.0'
        # type: 'default'
        # policy:
        # - allow:
        #   - PUT:/cluster/{clusterId}
        #   - GET:/cluster/{clusterId}
        #   where: "$resourceTags:clustertag = 'dev'"
        # - allow:
        #   - GET:/cluster/{clusterId}
        #   where: "$resourceTags:clustertag IN ('staging', 'production')"
        # # Sample json policy
        # {
        #   "version": "1.0",
        #   "type": "default",
        #   "policy": [
        #     {
        #       "allow": [
        #         "PUT:/cluster/{clusterId}",
        #         "GET:/cluster/{clusterId}"
        #       ],
        #       "where": "$resourceTags:clustertag = 'dev'"
        #     },
        #     {
        #       "allow": [
        #         "GET:/cluster/{clusterId}"
        #       ],
        #       "where": "$resourceTags:clustertag IN ('staging', 'production')"
        #     }
        #   ]
        # }
    UpdateOrganizationRequest:
      required:
        - name
      properties:
        name:
          type: string
          description: Organization's account name to be dupated.
    OIDCObj:
      required:
        - oidcConfigEndpoint
        - clientId
        - clientSecret
      properties:
        oidcConfigEndpoint:
          description: OIDC configuration URL
          type: string
        redirectURL:
          description: Callback URL for OIDC IdP
          type: string
        name:
          description: Name of the OIDC connection
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        nonce:
          type: string
        state:
          type: string
        accountId:
          type: string
        serviceId:
          type: string
        authorizationEndpoint:
          type: string
        tokenEndpoint:
          type: string
        userInfoEndpoint:
          type: string
        issuerEndpoint:
          type: string
        jwksEndpoint:
          type: string
        connectionId:
          type: string
    SAMLObj:
      required:
        - accountId
        - serviceId
        - defaultRoleId
        - idProvider
      properties:
        connectionId:
          type: string
        idProvider:
          type: string
        state:
          type: string
        name:
          type: string
        defaultRoleId:
          type: string
        loginLink:
          type: string
        metadataLink:
          type: string
        acsLink:
          type: string
        audienceLink:
          type: string
        attributeRoleMappings:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRoleMapping'
        rootURL:
          type: string
        accountId:
          type: string
        serviceId:
          type: string
    ClientKeyRequest:
      required:
        - defaultRoleId
        - clientName
      properties:
        defaultRoleId:
          type: string
        clientName:
          type: string
    ClientKeyResponse:
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
    ClientKeyObject:
      properties:
        accountId:
          type: string
        roles:
          type: array
          items:
            type: string
          example: ["roleId1", "roleId2", "roleId3"]
        clientName:
          type: string
        clientKeyId:
          type: string
        serviceId:
          type: string
        isActive:
          type: boolean
    Tags:
      required:
        - serviceId
        - name
        - resourceId
        - token
        - tags
      properties:
        serviceIdPath:
          type: string
        serviceId:
          type: string
        name:
          type: string
        resourceId:
          type: string
        accountId:
          type: string
        token:
          type: string
        tags:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    GetTagsRequest:
      required:
        - accountId
        - resourceName
        - resourceId
      properties:
        resourceName:
          type: string
        resourceId:
          type: string
        accountId:
          type: string
    AttributeRoleMapping:
      required:
        - attribute
        - value
        - roleId
      properties:
        attribute:
          type: string
        value:
          type: string
        roleId:
          type: string
    TokenRequest:
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
    TokenResponse:
      properties:
        accessToken:
          type: string
    OAuthTokenRequest:
      properties:
        code:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
    OAuthTokenResponse:
      properties:
        idToken:
          type: string
        accessToken:
          type: string
        expiresIn:
          type: integer
        tokenType:
          type: string
    PasswordPolicy:
      required:
        - minimumLegnth
        - requiredNumbers
        - requireSymbols
        - requireUpperCase
        - requireLowerCase
      properties:
        minimumLegnth:
          type: integer
          format: int32
          description: The minimum length of the password in the policy that you have set. This value can't be less than 6.
        requiredNumbers:
          type: boolean
          description: In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        requireSymbols:
          type: boolean
          description: In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        requireUpperCase:
          type: boolean
          description: In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        requireLowerCase:
          type: boolean
          description: In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
    # Note: any change in schema of AuditLogEntry should also refect in corresponding object in ARCOS's spec
    AuditLogEntry:
      required:
        - timestamp
        - accountId
        - serviceId
        - path
        - operation
        - authenticationCode
        - authorizationCode
        - principal
      properties:
        timestamp:
          type: string
        accountId:
          type: string
        serviceId:
          type: string
        path:
          type: string
        operation:
          type: string
        principal:
          type: string
        authenticationCode:
          type: integer
        authorizationCode:
          type: integer

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message

    BadRequestException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    UnauthorizedException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    NotFoundException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    ConflictException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    TooManyRequestsException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    InternalServerErrorException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
